// Generated from MiniGo.g4 by ANTLR 4.4
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MiniGoLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__25=1, T__24=2, T__23=3, T__22=4, T__21=5, T__20=6, T__19=7, T__18=8, 
		T__17=9, T__16=10, T__15=11, T__14=12, T__13=13, T__12=14, T__11=15, T__10=16, 
		T__9=17, T__8=18, T__7=19, T__6=20, T__5=21, T__4=22, T__3=23, T__2=24, 
		T__1=25, T__0=26, IMPORT=27, ARRAYLIST=28, POLLD=29, PEEKD=30, SIZED=31, 
		EMPTYD=32, PUSHD=33, PUSHS=34, POPS=35, PEEKS=36, SIZES=37, EMPTYS=38, 
		QUEUE=39, STACK=40, VOID=41, VAR=42, FUNC=43, FMT=44, INT=45, BOOL=46, 
		FOR=47, WHILE=48, SWITCH=49, CASE=50, IF=51, ELSE=52, RETURN=53, OR=54, 
		AND=55, LE=56, GE=57, EQ=58, NE=59, BREAK=60, CONTINUE=61, IDENT=62, LITERAL=63, 
		DecimalConstant=64, OctalConstant=65, HexadecimalConstant=66, WS=67;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'", 
		"'2'", "'3'", "'4'", "'5'", "'6'", "'7'", "'8'", "'9'", "':'", "';'", 
		"'<'", "'='", "'>'", "'?'", "'@'", "'A'", "'B'", "'C'"
	};
	public static final String[] ruleNames = {
		"T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", "T__18", 
		"T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", "T__10", 
		"T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", "T__1", 
		"T__0", "IMPORT", "ARRAYLIST", "POLLD", "PEEKD", "SIZED", "EMPTYD", "PUSHD", 
		"PUSHS", "POPS", "PEEKS", "SIZES", "EMPTYS", "QUEUE", "STACK", "VOID", 
		"VAR", "FUNC", "FMT", "INT", "BOOL", "FOR", "WHILE", "SWITCH", "CASE", 
		"IF", "ELSE", "RETURN", "OR", "AND", "LE", "GE", "EQ", "NE", "BREAK", 
		"CONTINUE", "IDENT", "LITERAL", "DecimalConstant", "OctalConstant", "HexadecimalConstant", 
		"WS"
	};


	public MiniGoLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "MiniGo.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2E\u01b8\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\3\2\3\2\3\3\3\3\3\3\3\3\3\3"+
		"\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3"+
		"\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21\3\22\3\22\3\22\3\23"+
		"\3\23\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\30\3\30"+
		"\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!"+
		"\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%"+
		"\3%\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3"+
		")\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3+\3+\3,\3,\3,\3,\3,\3-\3-\3-\3"+
		"-\3.\3.\3.\3.\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3"+
		"\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3"+
		"\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\66\3"+
		"\66\3\67\3\67\3\67\38\38\38\38\39\39\39\3:\3:\3:\3;\3;\3;\3<\3<\3<\3="+
		"\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3?\3?\7?\u0190\n?\f?\16?\u0193"+
		"\13?\3@\3@\3@\5@\u0198\n@\3A\3A\3A\7A\u019d\nA\fA\16A\u01a0\13A\5A\u01a2"+
		"\nA\3B\3B\7B\u01a6\nB\fB\16B\u01a9\13B\3C\3C\3C\6C\u01ae\nC\rC\16C\u01af"+
		"\3D\6D\u01b3\nD\rD\16D\u01b4\3D\3D\2\2E\3\3\5\4\7\5\t\6\13\7\r\b\17\t"+
		"\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27"+
		"-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W"+
		"-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;u<w=y>{?}@\177A\u0081B\u0083"+
		"C\u0085D\u0087E\3\2\n\5\2C\\aac|\6\2\62;C\\aac|\3\2\63;\3\2\62;\3\2\62"+
		"9\4\2ZZzz\5\2\62;CHch\5\2\13\f\17\17\"\"\u01bf\2\3\3\2\2\2\2\5\3\2\2\2"+
		"\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3"+
		"\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2"+
		"\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2"+
		"\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2"+
		"\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2"+
		"\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2"+
		"\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y"+
		"\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2"+
		"\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2"+
		"\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177"+
		"\3\2\2\2\2\u0081\3\2\2\2\2\u0083\3\2\2\2\2\u0085\3\2\2\2\2\u0087\3\2\2"+
		"\2\3\u0089\3\2\2\2\5\u008b\3\2\2\2\7\u0090\3\2\2\2\t\u0092\3\2\2\2\13"+
		"\u0094\3\2\2\2\r\u0096\3\2\2\2\17\u0098\3\2\2\2\21\u009e\3\2\2\2\23\u00a4"+
		"\3\2\2\2\25\u00a6\3\2\2\2\27\u00a8\3\2\2\2\31\u00aa\3\2\2\2\33\u00ac\3"+
		"\2\2\2\35\u00b4\3\2\2\2\37\u00b6\3\2\2\2!\u00b8\3\2\2\2#\u00bb\3\2\2\2"+
		"%\u00be\3\2\2\2\'\u00c0\3\2\2\2)\u00c2\3\2\2\2+\u00c4\3\2\2\2-\u00c9\3"+
		"\2\2\2/\u00cb\3\2\2\2\61\u00cd\3\2\2\2\63\u00cf\3\2\2\2\65\u00d1\3\2\2"+
		"\2\67\u00d3\3\2\2\29\u00da\3\2\2\2;\u00e4\3\2\2\2=\u00e9\3\2\2\2?\u00ef"+
		"\3\2\2\2A\u00f5\3\2\2\2C\u00fc\3\2\2\2E\u0102\3\2\2\2G\u0108\3\2\2\2I"+
		"\u010c\3\2\2\2K\u0112\3\2\2\2M\u0118\3\2\2\2O\u011f\3\2\2\2Q\u0125\3\2"+
		"\2\2S\u012b\3\2\2\2U\u0130\3\2\2\2W\u0134\3\2\2\2Y\u0139\3\2\2\2[\u013d"+
		"\3\2\2\2]\u0141\3\2\2\2_\u0146\3\2\2\2a\u014a\3\2\2\2c\u0150\3\2\2\2e"+
		"\u0157\3\2\2\2g\u015c\3\2\2\2i\u015f\3\2\2\2k\u0164\3\2\2\2m\u016b\3\2"+
		"\2\2o\u016e\3\2\2\2q\u0172\3\2\2\2s\u0175\3\2\2\2u\u0178\3\2\2\2w\u017b"+
		"\3\2\2\2y\u017e\3\2\2\2{\u0184\3\2\2\2}\u018d\3\2\2\2\177\u0197\3\2\2"+
		"\2\u0081\u01a1\3\2\2\2\u0083\u01a3\3\2\2\2\u0085\u01aa\3\2\2\2\u0087\u01b2"+
		"\3\2\2\2\u0089\u008a\7\61\2\2\u008a\4\3\2\2\2\u008b\u008c\7\60\2\2\u008c"+
		"\u008d\7i\2\2\u008d\u008e\7g\2\2\u008e\u008f\7v\2\2\u008f\6\3\2\2\2\u0090"+
		"\u0091\7}\2\2\u0091\b\3\2\2\2\u0092\u0093\7\177\2\2\u0093\n\3\2\2\2\u0094"+
		"\u0095\7?\2\2\u0095\f\3\2\2\2\u0096\u0097\7A\2\2\u0097\16\3\2\2\2\u0098"+
		"\u0099\7\60\2\2\u0099\u009a\7u\2\2\u009a\u009b\7k\2\2\u009b\u009c\7|\2"+
		"\2\u009c\u009d\7g\2\2\u009d\20\3\2\2\2\u009e\u009f\7\60\2\2\u009f\u00a0"+
		"\7h\2\2\u00a0\u00a1\7k\2\2\u00a1\u00a2\7p\2\2\u00a2\u00a3\7f\2\2\u00a3"+
		"\22\3\2\2\2\u00a4\u00a5\7*\2\2\u00a5\24\3\2\2\2\u00a6\u00a7\7,\2\2\u00a7"+
		"\26\3\2\2\2\u00a8\u00a9\7.\2\2\u00a9\30\3\2\2\2\u00aa\u00ab\7\60\2\2\u00ab"+
		"\32\3\2\2\2\u00ac\u00ad\7\60\2\2\u00ad\u00ae\7f\2\2\u00ae\u00af\7g\2\2"+
		"\u00af\u00b0\7n\2\2\u00b0\u00b1\7g\2\2\u00b1\u00b2\7v\2\2\u00b2\u00b3"+
		"\7g\2\2\u00b3\34\3\2\2\2\u00b4\u00b5\7<\2\2\u00b5\36\3\2\2\2\u00b6\u00b7"+
		"\7]\2\2\u00b7 \3\2\2\2\u00b8\u00b9\7-\2\2\u00b9\u00ba\7-\2\2\u00ba\"\3"+
		"\2\2\2\u00bb\u00bc\7/\2\2\u00bc\u00bd\7/\2\2\u00bd$\3\2\2\2\u00be\u00bf"+
		"\7>\2\2\u00bf&\3\2\2\2\u00c0\u00c1\7_\2\2\u00c1(\3\2\2\2\u00c2\u00c3\7"+
		"@\2\2\u00c3*\3\2\2\2\u00c4\u00c5\7\60\2\2\u00c5\u00c6\7c\2\2\u00c6\u00c7"+
		"\7f\2\2\u00c7\u00c8\7f\2\2\u00c8,\3\2\2\2\u00c9\u00ca\7#\2\2\u00ca.\3"+
		"\2\2\2\u00cb\u00cc\7\'\2\2\u00cc\60\3\2\2\2\u00cd\u00ce\7+\2\2\u00ce\62"+
		"\3\2\2\2\u00cf\u00d0\7-\2\2\u00d0\64\3\2\2\2\u00d1\u00d2\7/\2\2\u00d2"+
		"\66\3\2\2\2\u00d3\u00d4\7k\2\2\u00d4\u00d5\7o\2\2\u00d5\u00d6\7r\2\2\u00d6"+
		"\u00d7\7q\2\2\u00d7\u00d8\7t\2\2\u00d8\u00d9\7v\2\2\u00d98\3\2\2\2\u00da"+
		"\u00db\7C\2\2\u00db\u00dc\7t\2\2\u00dc\u00dd\7t\2\2\u00dd\u00de\7c\2\2"+
		"\u00de\u00df\7{\2\2\u00df\u00e0\7N\2\2\u00e0\u00e1\7k\2\2\u00e1\u00e2"+
		"\7u\2\2\u00e2\u00e3\7v\2\2\u00e3:\3\2\2\2\u00e4\u00e5\7r\2\2\u00e5\u00e6"+
		"\7q\2\2\u00e6\u00e7\7n\2\2\u00e7\u00e8\7n\2\2\u00e8<\3\2\2\2\u00e9\u00ea"+
		"\7r\2\2\u00ea\u00eb\7g\2\2\u00eb\u00ec\7g\2\2\u00ec\u00ed\7m\2\2\u00ed"+
		"\u00ee\7f\2\2\u00ee>\3\2\2\2\u00ef\u00f0\7u\2\2\u00f0\u00f1\7k\2\2\u00f1"+
		"\u00f2\7|\2\2\u00f2\u00f3\7g\2\2\u00f3\u00f4\7f\2\2\u00f4@\3\2\2\2\u00f5"+
		"\u00f6\7g\2\2\u00f6\u00f7\7o\2\2\u00f7\u00f8\7r\2\2\u00f8\u00f9\7v\2\2"+
		"\u00f9\u00fa\7{\2\2\u00fa\u00fb\7f\2\2\u00fbB\3\2\2\2\u00fc\u00fd\7r\2"+
		"\2\u00fd\u00fe\7w\2\2\u00fe\u00ff\7u\2\2\u00ff\u0100\7j\2\2\u0100\u0101"+
		"\7f\2\2\u0101D\3\2\2\2\u0102\u0103\7r\2\2\u0103\u0104\7w\2\2\u0104\u0105"+
		"\7u\2\2\u0105\u0106\7j\2\2\u0106\u0107\7u\2\2\u0107F\3\2\2\2\u0108\u0109"+
		"\7r\2\2\u0109\u010a\7q\2\2\u010a\u010b\7r\2\2\u010bH\3\2\2\2\u010c\u010d"+
		"\7r\2\2\u010d\u010e\7g\2\2\u010e\u010f\7g\2\2\u010f\u0110\7m\2\2\u0110"+
		"\u0111\7u\2\2\u0111J\3\2\2\2\u0112\u0113\7u\2\2\u0113\u0114\7k\2\2\u0114"+
		"\u0115\7|\2\2\u0115\u0116\7g\2\2\u0116\u0117\7u\2\2\u0117L\3\2\2\2\u0118"+
		"\u0119\7g\2\2\u0119\u011a\7o\2\2\u011a\u011b\7r\2\2\u011b\u011c\7v\2\2"+
		"\u011c\u011d\7{\2\2\u011d\u011e\7u\2\2\u011eN\3\2\2\2\u011f\u0120\7S\2"+
		"\2\u0120\u0121\7w\2\2\u0121\u0122\7g\2\2\u0122\u0123\7w\2\2\u0123\u0124"+
		"\7g\2\2\u0124P\3\2\2\2\u0125\u0126\7U\2\2\u0126\u0127\7v\2\2\u0127\u0128"+
		"\7c\2\2\u0128\u0129\7e\2\2\u0129\u012a\7m\2\2\u012aR\3\2\2\2\u012b\u012c"+
		"\7x\2\2\u012c\u012d\7q\2\2\u012d\u012e\7k\2\2\u012e\u012f\7f\2\2\u012f"+
		"T\3\2\2\2\u0130\u0131\7x\2\2\u0131\u0132\7c\2\2\u0132\u0133\7t\2\2\u0133"+
		"V\3\2\2\2\u0134\u0135\7h\2\2\u0135\u0136\7w\2\2\u0136\u0137\7p\2\2\u0137"+
		"\u0138\7e\2\2\u0138X\3\2\2\2\u0139\u013a\7h\2\2\u013a\u013b\7o\2\2\u013b"+
		"\u013c\7v\2\2\u013cZ\3\2\2\2\u013d\u013e\7k\2\2\u013e\u013f\7p\2\2\u013f"+
		"\u0140\7v\2\2\u0140\\\3\2\2\2\u0141\u0142\7d\2\2\u0142\u0143\7q\2\2\u0143"+
		"\u0144\7q\2\2\u0144\u0145\7n\2\2\u0145^\3\2\2\2\u0146\u0147\7h\2\2\u0147"+
		"\u0148\7q\2\2\u0148\u0149\7t\2\2\u0149`\3\2\2\2\u014a\u014b\7y\2\2\u014b"+
		"\u014c\7j\2\2\u014c\u014d\7k\2\2\u014d\u014e\7n\2\2\u014e\u014f\7g\2\2"+
		"\u014fb\3\2\2\2\u0150\u0151\7u\2\2\u0151\u0152\7y\2\2\u0152\u0153\7k\2"+
		"\2\u0153\u0154\7v\2\2\u0154\u0155\7e\2\2\u0155\u0156\7j\2\2\u0156d\3\2"+
		"\2\2\u0157\u0158\7e\2\2\u0158\u0159\7c\2\2\u0159\u015a\7u\2\2\u015a\u015b"+
		"\7g\2\2\u015bf\3\2\2\2\u015c\u015d\7k\2\2\u015d\u015e\7h\2\2\u015eh\3"+
		"\2\2\2\u015f\u0160\7g\2\2\u0160\u0161\7n\2\2\u0161\u0162\7u\2\2\u0162"+
		"\u0163\7g\2\2\u0163j\3\2\2\2\u0164\u0165\7t\2\2\u0165\u0166\7g\2\2\u0166"+
		"\u0167\7v\2\2\u0167\u0168\7w\2\2\u0168\u0169\7t\2\2\u0169\u016a\7p\2\2"+
		"\u016al\3\2\2\2\u016b\u016c\7q\2\2\u016c\u016d\7t\2\2\u016dn\3\2\2\2\u016e"+
		"\u016f\7c\2\2\u016f\u0170\7p\2\2\u0170\u0171\7f\2\2\u0171p\3\2\2\2\u0172"+
		"\u0173\7>\2\2\u0173\u0174\7?\2\2\u0174r\3\2\2\2\u0175\u0176\7@\2\2\u0176"+
		"\u0177\7?\2\2\u0177t\3\2\2\2\u0178\u0179\7?\2\2\u0179\u017a\7?\2\2\u017a"+
		"v\3\2\2\2\u017b\u017c\7#\2\2\u017c\u017d\7?\2\2\u017dx\3\2\2\2\u017e\u017f"+
		"\7d\2\2\u017f\u0180\7t\2\2\u0180\u0181\7g\2\2\u0181\u0182\7c\2\2\u0182"+
		"\u0183\7m\2\2\u0183z\3\2\2\2\u0184\u0185\7e\2\2\u0185\u0186\7q\2\2\u0186"+
		"\u0187\7p\2\2\u0187\u0188\7v\2\2\u0188\u0189\7k\2\2\u0189\u018a\7p\2\2"+
		"\u018a\u018b\7w\2\2\u018b\u018c\7g\2\2\u018c|\3\2\2\2\u018d\u0191\t\2"+
		"\2\2\u018e\u0190\t\3\2\2\u018f\u018e\3\2\2\2\u0190\u0193\3\2\2\2\u0191"+
		"\u018f\3\2\2\2\u0191\u0192\3\2\2\2\u0192~\3\2\2\2\u0193\u0191\3\2\2\2"+
		"\u0194\u0198\5\u0081A\2\u0195\u0198\5\u0083B\2\u0196\u0198\5\u0085C\2"+
		"\u0197\u0194\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0196\3\2\2\2\u0198\u0080"+
		"\3\2\2\2\u0199\u01a2\7\62\2\2\u019a\u019e\t\4\2\2\u019b\u019d\t\5\2\2"+
		"\u019c\u019b\3\2\2\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2\u019e\u019f"+
		"\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3\2\2\2\u01a1\u0199\3\2\2\2\u01a1"+
		"\u019a\3\2\2\2\u01a2\u0082\3\2\2\2\u01a3\u01a7\7\62\2\2\u01a4\u01a6\t"+
		"\6\2\2\u01a5\u01a4\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7"+
		"\u01a8\3\2\2\2\u01a8\u0084\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ab\7\62"+
		"\2\2\u01ab\u01ad\t\7\2\2\u01ac\u01ae\t\b\2\2\u01ad\u01ac\3\2\2\2\u01ae"+
		"\u01af\3\2\2\2\u01af\u01ad\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\u0086\3\2"+
		"\2\2\u01b1\u01b3\t\t\2\2\u01b2\u01b1\3\2\2\2\u01b3\u01b4\3\2\2\2\u01b4"+
		"\u01b2\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\bD"+
		"\2\2\u01b7\u0088\3\2\2\2\13\2\u018f\u0191\u0197\u019e\u01a1\u01a7\u01af"+
		"\u01b4\3\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}